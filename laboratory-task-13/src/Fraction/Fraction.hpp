#ifndef FRACTION_HPP
#define FRACTION_HPP
#include <cstdlib>
#include <iostream>
#include <stdexcept>
#include <math.h>


class Fraction
{
private:
	int32_t numerator;
	int32_t denominator;
public:

/*===========================================================================
============================ Конструкторы ===================================
===========================================================================*/

	Fraction(int32_t = 0, int32_t = 1);
	Fraction(const Fraction&);

/*===========================================================================
============================== Деструктор ===================================
===========================================================================*/

	virtual ~Fraction();

/*===========================================================================
========================== Сокращение дроби =================================
===========================================================================*/

	Fraction& reduct();

/*===========================================================================
================================ Геттеры ====================================
===========================================================================*/

	int32_t getNum();
	int32_t getDenum();

/*===========================================================================
================================ Сеттеры ====================================
===========================================================================*/

	void setNum(int32_t);
	void setDenum(int32_t);

/*===========================================================================
=========================== Бинарные операторы ==============================
===========================================================================*/

	Fraction operator+(const Fraction&);
	Fraction operator+(const int32_t);
	Fraction operator-(const Fraction&);
	Fraction operator-(const int32_t);
	Fraction operator*(const Fraction&);
	Fraction operator*(const int32_t);
	Fraction operator/(Fraction&);
	Fraction operator/(const int32_t);

/*===========================================================================
============================ Унарный минус ==================================
===========================================================================*/

	Fraction operator-() const;
	
/*===========================================================================
========================= Операторы сравнения ===============================
===========================================================================*/

	bool operator==(const Fraction&) const;
	bool operator!=(const Fraction&);
	bool operator==(const int32_t);
	bool operator>(const Fraction&);
	bool operator>(const int32_t);
	bool operator<(const Fraction&);
	bool operator<(const int32_t);
	bool operator>=(const Fraction&);
	bool operator>=(const int32_t);
	bool operator<=(const Fraction&);
	bool operator<=(const int32_t);

/*===========================================================================
========================= Инкрементирование =================================
===========================================================================*/

	Fraction operator++(int32_t);
	Fraction& operator++();

/*===========================================================================
========================= Декриментирование =================================
===========================================================================*/

	Fraction operator--(int32_t);
	Fraction& operator--();

/*===========================================================================
============================ Обратная дробь =================================
===========================================================================*/

	Fraction operator!();

/*===========================================================================
========================= Операторы ввода/вывода ============================
===========================================================================*/

	friend std::ostream& operator<<(std::ostream&, const Fraction&);
	friend std::istream& operator>>(std::istream&, Fraction&);

/*===========================================================================
========================= Преобразование в Double ===========================
===========================================================================*/

	double toDouble();


/*===========================================================================
========================= Оператор присваивания =============================
===========================================================================*/

	Fraction& operator=(const Fraction&);

/*===========================================================================
==================== Составные операторы присваивания =======================
===========================================================================*/

	Fraction& operator+=(const Fraction&);
	Fraction& operator-=(const Fraction&);
	Fraction& operator*=(const Fraction&);
	Fraction& operator/=(const Fraction&);

};
#endif //FRACTION_HPP