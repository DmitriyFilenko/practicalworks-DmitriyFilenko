#ifndef MYMATRIX_HPP
#define MYMATRIX_HPP


#include <iostream>
#include <stdexcept>
#include <cstdlib>
#include <iomanip>


class MyMatrix
{
private:
	int32_t** matrixPtr;
	int32_t rows;
	int32_t columns;
public:

/*===========================================================================
=============================== Конструкторы ================================
===========================================================================*/

	MyMatrix();
	MyMatrix(int32_t);
	MyMatrix(int32_t, int32_t);
	MyMatrix(const MyMatrix&);

/*===========================================================================
============================= Деструктор ====================================
===========================================================================*/

	virtual ~MyMatrix();

/*===========================================================================
============================ Вывод матрицы ==================================
===========================================================================*/

	void print();

/*===========================================================================
=========================== Оператор присваивания ===========================
===========================================================================*/

	MyMatrix operator=(const MyMatrix&);

/*===========================================================================
================================= Геттеры ===================================
===========================================================================*/

	int32_t getElement(int32_t);
	int32_t getElement(int32_t, int32_t);
	int32_t getRows();
	int32_t getColumns();


/*===========================================================================
================================= Сеттеры ===================================
===========================================================================*/

	void setElement(int32_t, int32_t);
	void setElement(int32_t, int32_t, int32_t);
	void setRows(int32_t);
	void setColumns(int32_t);

/*===========================================================================
============================ Бинарные операторы =============================
===========================================================================*/

	MyMatrix operator*(const int32_t);
	MyMatrix operator*(const MyMatrix&);
	MyMatrix operator/(const int32_t);
	MyMatrix operator+(const MyMatrix&);
	MyMatrix operator-(const MyMatrix&);

/*===========================================================================
===================== Составные операторы присваивания ======================
===========================================================================*/

	MyMatrix operator/=(const int32_t);
	MyMatrix operator+=(const MyMatrix&);
	MyMatrix operator-=(const MyMatrix&);
	MyMatrix operator*=(const MyMatrix&);
	friend MyMatrix& operator *= (MyMatrix&,const int32_t);
	friend MyMatrix operator* (const int32_t, MyMatrix&);
	friend MyMatrix operator*(MyMatrix&, const int32_t);

/*===========================================================================
=========================== операторы сравнения =============================
===========================================================================*/

	bool operator ==(const MyMatrix&);
	bool operator !=(const MyMatrix&);

/*===========================================================================
==================== Перегрузка операторов ввода/вывода =====================
===========================================================================*/

	friend std::ostream& operator<<(std::ostream&, const MyMatrix&);
	friend std::istream& operator>>(std::istream&, MyMatrix&);

};
#endif // MYMATRIX_HPP